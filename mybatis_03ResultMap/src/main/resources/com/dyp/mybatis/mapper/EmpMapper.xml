<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace ：对应的mapper接口 -->
<mapper namespace="com.dyp.mybatis.mapper.EmpMapper">


<!--    7.1字段名和属性名不一致的情况-->

    <select id="getEmpByEmpId" resultType="com.dyp.mybatis.pojo.Emp">
        select * from t_emp where emp_id =#{empId};
    </select>

<!--    使用 ResltMap -->
    <!-- 相同的属性和名称不用写也行的 -->
    <resultMap id="empResultMap" type="com.dyp.mybatis.pojo.Emp">
        <!-- id 处理主键和属性字段的映射关系 -->
        <id column="emp_id" property="empId"></id>
        <!-- result 处理普通字段和属性的映射关系 -->
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="dept_id" property="deptId"></result>
    </resultMap>

    <select id="getEmpResultMapByEmpId" resultMap="empResultMap">
        SELECT * FROM t_emp WHERE emp_id = #{empId};
    </select>



<!--7.2多对一关系-->

<!--    方式一：级联方式处理 ，即一次连接出所有字段。-->
    <resultMap id="getEmpAndDeptByEmpId" type="com.dyp.mybatis.pojo.Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="dept_id" property="deptId"></result>
        <!-- 级联方式：多对一的映射关系 -->
        <result column="dept_id" property="dept.deptId"></result>
        <result column="dept_name" property="dept.deptName"></result>
    </resultMap>


    <select id="getEmpAndDeptByEmpId" resultMap="getEmpAndDeptByEmpId">
        SELECT *
        FROM t_emp
                 LEFT JOIN t_dept
                           ON t_emp.dept_id = t_dept.dept_id
        WHERE emp_id = #{empId};

    </select>


<!--    方式二：association 标签。处理实体类类型的属性-->
    <resultMap id="getEmpAndDeptByEmpIdTwo" type="com.dyp.mybatis.pojo.Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="dept_id" property="deptId"></result>

        <!-- association : 专门处理多对一、一对一 的映射关系 -->
        <association property="dept" javaType="com.dyp.mybatis.pojo.Dept">
            <id column="dept_id" property="deptId"></id>
            <result column="dept_name" property="deptName"></result>
        </association>
    </resultMap>

    <select id="getEmpAndDeptByEmpIdTwo" resultMap="getEmpAndDeptByEmpIdTwo">
        SELECT t_emp.*,t_dept.*
        FROM t_emp
                 LEFT JOIN t_dept
                           ON t_emp.dept_id = t_dept.dept_id
        WHERE emp_id = #{empId};
    </select>

    <!--    方法三：分步查询-->
    <resultMap id="getEmpAndDeptByStepResultMap" type="com.dyp.mybatis.pojo.Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="dept_id" property="deptId"></result>

        <!--
            property: 关联的类型
            fetchType: 表示开启了延迟加载的环境中，通过属性设置当前的分步查询是否使用延迟加载
                    eager：立即加载
                    lacy：延迟加载

            select: 第二步查询的唯一标识
            column: 第一步查询出来的外键
        -->
        <association property="dept" fetchType="eager"
                     select="com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="dept_id" ></association>
    </resultMap>

    <!-- Emp getEmpAndDeptByStepOne(@Param("empId") Integer empId); -->
    <select id="getEmpAndDeptByStepOne" resultMap="getEmpAndDeptByStepResultMap">
        SELECT * FROM t_emp WHERE emp_id = #{empId};
    </select>



</mapper>